
		text[index].strip()
		
        sRes = ' '.join(l0[:c])
        lout[1] = sRes


text[index].strip()we've tried our best to effect
reconciliation between the two parties
we've tried our best to affect
reconciliation between the two parties

l1
we've tried our best to effect reconciliation between the two parties
we've tried our best to affect reconciliation between the two parties



even if you had given him much more
money he might not have paid off the
debt even if you had given him much more
money he might not have paid off the
debt

even if you had given him much more money he might not have paid off the debt 
even if you had given him much more money he might not have paid off the debt


my mother has sent me a registered
letter I guess she has something
important to tell me
my mother has sent me a registered
letter I guess she has something
important to tell me


my mother has sent me a registeredletter I guess she has something important to tell me
my mother has sent me a registered letter I guess she has something important to tell me



============
def mTwoTwo(text, index, lout):
    '''
    lout - выходной массив с индексом обработанного
    элемента
    '''
    bRes = False
    if index >= len(text)-1:
        return bRes
    lout[0] = index
    if text[index].strip() == text[index+1].strip():
        bRes = True
        lout[0] = index+1
    
#     bRes = True
#     lout[0] = index
    return bRes

def mOneTwo(text, index, lout):
    '''
    в одной строке два одинаковых предложения
    '''
    bRes = False
    lout[0] = index
    s = text[index].strip()
    l = s.split(' ')
    c = len(l)//2
    if len(l) % 2 != 0 or len(l) == 1:
        return bRes
    bRes = True
    for i in range(c):
        if l[i]!=l[i+c]:
            bRes = False
            break
    return bRes

def mFourTwo(ltext, index, lout): 
    '''
    1 2 3
    4
    1 2 3
    4
    '''
    bRes = False
    if len(ltext)<=index+3:
        return bRes
    l1 = ltext[index] + ' ' + ltext[index+1]
    l2 = ltext[index+2] + ' ' + ltext[index+3]
    if l1 == l2:
        bRes = True
        lout[0] = index+3
    return bRes

def mThreeTwo(ltext, index, lout): 
    '''
    1 2 3
    4 1 2 
    3 4
    '''
    lout[0] = index
    bRes = False
    if len(ltext)<=index+2:
        return bRes
    s0 = ' '.join(ltext[index:index+3])
    l0 = s0.split(' ')
    if len(l0) % 2 != 0 or len(l0) == 1:
        return bRes
    c = len(l0)//2
    bRes = True
    for i in range(c):
        if l0[i]!=l0[i+c]:
            bRes = False
            break
    if bRes:
        lout[0] = index + 2
    l1 = l2 = ''
    if l1 == l2:
        bRes = True
        lout[0] = index+3
    return bRes

def foo():
    text = mReadFile('x26a.txt')
    textOut = ''
    textOut2 = ''
    ltext = text.split('\n')
    count = len(ltext)
    index = 0
    lout = [0,'']
    bRet = False
    cTwoTwo = 0
    cOneTwo = 0
    cFourTwo = 0
    cThreeTwo = 0
    while index < count:
        bRet = False
        bRet = mTwoTwo(ltext, index,lout)
        if bRet:
            cTwoTwo += 1
            index = lout[0]
        bRet = mOneTwo(ltext, index, lout)
        if bRet:
            cOneTwo += 1
        bRet = mFourTwo(ltext, index, lout)
        if bRet:
            cFourTwo+=1
            index = lout[0]
        bRet = mThreeTwo(ltext, index, lout)
        if bRet:
            cThreeTwo +=1
            index = lout[0]
    
#         + ' ' + ltext[index]   \
        st = ''
#         st = ' ' + ltext[index]    
        textOut2 += str(index)+' '+ str(cTwoTwo) \
        + ' ' + str(cOneTwo) \
        + ' ' + str(cFourTwo) \
        + ' ' + str(cThreeTwo) \
        + st \
        + '\n'
        
        index += 1
    
    str1 = f'{cTwoTwo} {cOneTwo} \n'
    textOut2 = str1 + textOut2
    mWriteFile('x26c.txt', textOut2)
    print(cTwoTwo, cOneTwo)
foo()